@model List<EShop.Domain.Domain_Models.Wishlist>

@{
    ViewData["Title"] = "My Wishlist";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">My Wishlist</h2>
            
            @if (Model.Any())
            {
                <div class="row">
                    @foreach (var wishlistItem in Model)
                    {
                        <div class="col-md-4 col-sm-6 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">@wishlistItem.Product?.ProductName</h5>
                                    <p class="card-text">@wishlistItem.Product?.ProductDescription</p>
                                    <p class="card-text">
                                        <strong>Price: $@wishlistItem.Product?.ProductPrice.ToString("F2")</strong>
                                    </p>
                                    <p class="card-text">
                                        <small class="text-muted">Added: @wishlistItem.AddedDate.ToString("MM/dd/yyyy")</small>
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <a href="@Url.Action("Details", "Products", new { id = wishlistItem.ProductId })" class="btn btn-primary btn-sm">
                                        View Details
                                    </a>
                                    <form method="post" action="@Url.Action("Remove", "Wishlist")" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="productId" value="@wishlistItem.ProductId" />
                                        <button type="submit" class="btn btn-danger btn-sm">
                                            <i class="bi bi-trash"></i> Remove
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <h4>Your Wishlist is Empty</h4>
                    <p>You haven't added any items to your wishlist yet.</p>
                    <a href="@Url.Action("Index", "Products")" class="btn btn-primary">
                        Browse Products
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // Handle wishlist remove form submissions
    document.addEventListener('DOMContentLoaded', function() {
        const removeForms = document.querySelectorAll('form[action*="Remove"]');
        
        removeForms.forEach(function(form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const button = this.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                const card = this.closest('.col-md-4');
                
                // Show loading state
                button.innerHTML = '<i class="bi bi-spinner-border spinner-border spinner-border-sm"></i> Removing...';
                button.disabled = true;
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success feedback briefly
                        showToast(data.message || 'Item removed from wishlist!', 'success');
                        
                        // Fade out the card and remove it
                        card.style.transition = 'opacity 0.3s ease-out';
                        card.style.opacity = '0';
                        
                        setTimeout(() => {
                            card.remove();
                            
                            // Check if wishlist is now empty
                            const remainingItems = document.querySelectorAll('.col-md-4');
                            if (remainingItems.length === 0) {
                                // Reload page to show empty state
                                window.location.reload();
                            }
                        }, 300);
                        
                    } else {
                        button.innerHTML = originalText;
                        button.disabled = false;
                        showToast(data.message || 'Error removing item from wishlist', 'error');
                    }
                })
                .catch(error => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                    showToast('Error removing item from wishlist', 'error');
                    console.error('Error:', error);
                });
            });
        });
    });
    
    // Simple toast notification function
    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close ms-auto" aria-label="Close"></button>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            toast.remove();
        }, 3000);
        
        // Allow manual close
        toast.querySelector('.btn-close').addEventListener('click', () => {
            toast.remove();
        });
    }
</script>
